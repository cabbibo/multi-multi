using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class SmallStringModel{

   
    [RealtimeProperty(1, false, false)]
    private string _words;

[RealtimeProperty(2, false, false)]
private int _creatorID;


[RealtimeProperty(3, false, false)]
private float _timeCreated;
    
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class SmallStringModel : IModel {
    // Properties
    public string words {
        get { return _words; }
        set { if (value == _words) return; _wordsShouldWrite = true; _words = value; }
    }
    public int creatorID {
        get { return _creatorID; }
        set { if (value == _creatorID) return; _creatorIDShouldWrite = true; _creatorID = value; }
    }
    public float timeCreated {
        get { return _timeCreated; }
        set { if (value == _timeCreated) return; _timeCreatedShouldWrite = true; _timeCreated = value; }
    }
    
    private bool _wordsShouldWrite;
    private bool _creatorIDShouldWrite;
    private bool _timeCreatedShouldWrite;
    
    public SmallStringModel() {
    }
    
    // Serialization
    enum PropertyID {
        Words = 1,
        CreatorID = 2,
        TimeCreated = 3,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.Words, _words);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CreatorID, (uint)_creatorID);
            length += WriteStream.WriteFloatLength((uint)PropertyID.TimeCreated);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_wordsShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.Words, _words);
                }
                if (_creatorIDShouldWrite) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.CreatorID, (uint)_creatorID);
                }
                if (_timeCreatedShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.TimeCreated);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.Words, _words);
            _wordsShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.CreatorID, (uint)_creatorID);
            _creatorIDShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.TimeCreated, _timeCreated);
            _timeCreatedShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_wordsShouldWrite) {
                    stream.WriteString((uint)PropertyID.Words, _words);
                    _wordsShouldWrite = false;
                }
                if (_creatorIDShouldWrite) {
                    stream.WriteVarint32((uint)PropertyID.CreatorID, (uint)_creatorID);
                    _creatorIDShouldWrite = false;
                }
                if (_timeCreatedShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.TimeCreated, _timeCreated);
                    _timeCreatedShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Words: {
                    _words = stream.ReadString();
                    _wordsShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.CreatorID: {
                    _creatorID = (int)stream.ReadVarint32();
                    _creatorIDShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.TimeCreated: {
                    _timeCreated = stream.ReadFloat();
                    _timeCreatedShouldWrite = false;
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
