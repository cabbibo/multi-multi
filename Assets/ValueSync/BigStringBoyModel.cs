using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class BigStringBoyModel{

    [RealtimeProperty(1, false, false)]
    private string _bigString;


     [RealtimeProperty(2, false, false)]
    private int _lastOwnerID;
    
    [RealtimeProperty(3, false, false)]
    private bool _currentlyOwned;


    [RealtimeProperty(4, false, false)]
    private int _cursorPosition;



    [RealtimeProperty(5, false, false)]
    private RealtimeArray<SmallStringModel> _smallStrings;



}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class BigStringBoyModel : IModel {
    // Properties
    public string bigString {
        get { return _bigString; }
        set { if (value == _bigString) return; _bigStringShouldWrite = true; _bigString = value; }
    }
    public int lastOwnerID {
        get { return _lastOwnerID; }
        set { if (value == _lastOwnerID) return; _lastOwnerIDShouldWrite = true; _lastOwnerID = value; }
    }
    public bool currentlyOwned {
        get { return _currentlyOwned; }
        set { if (value == _currentlyOwned) return; _currentlyOwnedShouldWrite = true; _currentlyOwned = value; }
    }
    public int cursorPosition {
        get { return _cursorPosition; }
        set { if (value == _cursorPosition) return; _cursorPositionShouldWrite = true; _cursorPosition = value; }
    }
    public Normal.Realtime.Serialization.RealtimeArray<SmallStringModel> smallStrings {
        get { return _smallStrings; }
    }
    
    private bool _bigStringShouldWrite;
    private bool _lastOwnerIDShouldWrite;
    private bool _currentlyOwnedShouldWrite;
    private bool _cursorPositionShouldWrite;
    
    public BigStringBoyModel() {
        _smallStrings = new Normal.Realtime.Serialization.RealtimeArray<SmallStringModel>();
    }
    
    // Serialization
    enum PropertyID {
        BigString = 1,
        LastOwnerID = 2,
        CurrentlyOwned = 3,
        CursorPosition = 4,
        SmallStrings = 5,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteStringLength((uint)PropertyID.BigString, _bigString);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.LastOwnerID, (uint)_lastOwnerID);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CurrentlyOwned, _currentlyOwned ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CursorPosition, (uint)_cursorPosition);
            length += WriteStream.WriteCollectionLength((uint)PropertyID.SmallStrings, _smallStrings, context);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_bigStringShouldWrite) {
                    length += WriteStream.WriteStringLength((uint)PropertyID.BigString, _bigString);
                }
                if (_lastOwnerIDShouldWrite) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.LastOwnerID, (uint)_lastOwnerID);
                }
                if (_currentlyOwnedShouldWrite) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.CurrentlyOwned, _currentlyOwned ? 1u : 0u);
                }
                if (_cursorPositionShouldWrite) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.CursorPosition, (uint)_cursorPosition);
                }
            }
            // Models
            length += WriteStream.WriteCollectionLength((uint)PropertyID.SmallStrings, _smallStrings, context);
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteString((uint)PropertyID.BigString, _bigString);
            _bigStringShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.LastOwnerID, (uint)_lastOwnerID);
            _lastOwnerIDShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.CurrentlyOwned, _currentlyOwned ? 1u : 0u);
            _currentlyOwnedShouldWrite = false;
            stream.WriteVarint32((uint)PropertyID.CursorPosition, (uint)_cursorPosition);
            _cursorPositionShouldWrite = false;
            stream.WriteCollection((uint)PropertyID.SmallStrings, _smallStrings, context);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_bigStringShouldWrite) {
                    stream.WriteString((uint)PropertyID.BigString, _bigString);
                    _bigStringShouldWrite = false;
                }
                if (_lastOwnerIDShouldWrite) {
                    stream.WriteVarint32((uint)PropertyID.LastOwnerID, (uint)_lastOwnerID);
                    _lastOwnerIDShouldWrite = false;
                }
                if (_currentlyOwnedShouldWrite) {
                    stream.WriteVarint32((uint)PropertyID.CurrentlyOwned, _currentlyOwned ? 1u : 0u);
                    _currentlyOwnedShouldWrite = false;
                }
                if (_cursorPositionShouldWrite) {
                    stream.WriteVarint32((uint)PropertyID.CursorPosition, (uint)_cursorPosition);
                    _cursorPositionShouldWrite = false;
                }
            }
            // Models
            stream.WriteCollection((uint)PropertyID.SmallStrings, _smallStrings, context);
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.BigString: {
                    _bigString = stream.ReadString();
                    _bigStringShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.LastOwnerID: {
                    _lastOwnerID = (int)stream.ReadVarint32();
                    _lastOwnerIDShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.CurrentlyOwned: {
                    _currentlyOwned = (stream.ReadVarint32() != 0);
                    _currentlyOwnedShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.CursorPosition: {
                    _cursorPosition = (int)stream.ReadVarint32();
                    _cursorPositionShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.SmallStrings: {
                    stream.ReadCollection(_smallStrings, context);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
