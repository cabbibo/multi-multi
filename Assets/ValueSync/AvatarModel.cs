using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class AvatarModel {
    [RealtimeProperty(1, false, false)]
    private float _leftTrigger;


    [RealtimeProperty(2, false, false)]
    private float _rightTrigger;


    [RealtimeProperty(3, false, false)]
    private float _voice;


    [RealtimeProperty(4, false, false)]
    private float _debug;

}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class AvatarModel : IModel {
    // Properties
    public float leftTrigger {
        get { return _leftTrigger; }
        set { if (value == _leftTrigger) return; _leftTriggerShouldWrite = true; _leftTrigger = value; }
    }
    public float rightTrigger {
        get { return _rightTrigger; }
        set { if (value == _rightTrigger) return; _rightTriggerShouldWrite = true; _rightTrigger = value; }
    }
    public float voice {
        get { return _voice; }
        set { if (value == _voice) return; _voiceShouldWrite = true; _voice = value; }
    }
    public float debug {
        get { return _debug; }
        set { if (value == _debug) return; _debugShouldWrite = true; _debug = value; }
    }
    
    private bool _leftTriggerShouldWrite;
    private bool _rightTriggerShouldWrite;
    private bool _voiceShouldWrite;
    private bool _debugShouldWrite;
    
    public AvatarModel() {
    }
    
    // Serialization
    enum PropertyID {
        LeftTrigger = 1,
        RightTrigger = 2,
        Voice = 3,
        Debug = 4,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.LeftTrigger);
            length += WriteStream.WriteFloatLength((uint)PropertyID.RightTrigger);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Voice);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Debug);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_leftTriggerShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.LeftTrigger);
                }
                if (_rightTriggerShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.RightTrigger);
                }
                if (_voiceShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Voice);
                }
                if (_debugShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Debug);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.LeftTrigger, _leftTrigger);
            _leftTriggerShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.RightTrigger, _rightTrigger);
            _rightTriggerShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.Voice, _voice);
            _voiceShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.Debug, _debug);
            _debugShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_leftTriggerShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.LeftTrigger, _leftTrigger);
                    _leftTriggerShouldWrite = false;
                }
                if (_rightTriggerShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.RightTrigger, _rightTrigger);
                    _rightTriggerShouldWrite = false;
                }
                if (_voiceShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.Voice, _voice);
                    _voiceShouldWrite = false;
                }
                if (_debugShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.Debug, _debug);
                    _debugShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.LeftTrigger: {
                    _leftTrigger = stream.ReadFloat();
                    _leftTriggerShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.RightTrigger: {
                    _rightTrigger = stream.ReadFloat();
                    _rightTriggerShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.Voice: {
                    _voice = stream.ReadFloat();
                    _voiceShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.Debug: {
                    _debug = stream.ReadFloat();
                    _debugShouldWrite = false;
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
