using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class DesktopAvatarModel {

    [RealtimeProperty(1, false, false)]
    private Vector2 _mousePosition;

    [RealtimeProperty(2, false, false)]
    private float _mouseDown;


    [RealtimeProperty(3, false, false)]
    private Vector2 _screen;


    [RealtimeProperty(4, false, false)]
    private float _debug;


    
    [RealtimeProperty(5, false, false)]
    private float _voice;


}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class DesktopAvatarModel : IModel {
    // Properties
    public UnityEngine.Vector2 mousePosition {
        get { return _mousePosition; }
        set { if (value == _mousePosition) return; _mousePositionShouldWrite = true; _mousePosition = value; }
    }
    public float mouseDown {
        get { return _mouseDown; }
        set { if (value == _mouseDown) return; _mouseDownShouldWrite = true; _mouseDown = value; }
    }
    public UnityEngine.Vector2 screen {
        get { return _screen; }
        set { if (value == _screen) return; _screenShouldWrite = true; _screen = value; }
    }
    public float debug {
        get { return _debug; }
        set { if (value == _debug) return; _debugShouldWrite = true; _debug = value; }
    }
    public float voice {
        get { return _voice; }
        set { if (value == _voice) return; _voiceShouldWrite = true; _voice = value; }
    }
    
    private bool _mousePositionShouldWrite;
    private bool _mouseDownShouldWrite;
    private bool _screenShouldWrite;
    private bool _debugShouldWrite;
    private bool _voiceShouldWrite;
    
    public DesktopAvatarModel() {
    }
    
    // Serialization
    enum PropertyID {
        MousePosition = 1,
        MouseDown = 2,
        Screen = 3,
        Debug = 4,
        Voice = 5,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteBytesLength((uint)PropertyID.MousePosition, WriteStream.Vector2ToBytesLength());
            length += WriteStream.WriteFloatLength((uint)PropertyID.MouseDown);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Screen, WriteStream.Vector2ToBytesLength());
            length += WriteStream.WriteFloatLength((uint)PropertyID.Debug);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Voice);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_mousePositionShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.MousePosition, WriteStream.Vector2ToBytesLength());
                }
                if (_mouseDownShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.MouseDown);
                }
                if (_screenShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.Screen, WriteStream.Vector2ToBytesLength());
                }
                if (_debugShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Debug);
                }
                if (_voiceShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.Voice);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteBytes((uint)PropertyID.MousePosition, WriteStream.Vector2ToBytes(_mousePosition));
            _mousePositionShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.MouseDown, _mouseDown);
            _mouseDownShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.Screen, WriteStream.Vector2ToBytes(_screen));
            _screenShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.Debug, _debug);
            _debugShouldWrite = false;
            stream.WriteFloat((uint)PropertyID.Voice, _voice);
            _voiceShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_mousePositionShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.MousePosition, WriteStream.Vector2ToBytes(_mousePosition));
                    _mousePositionShouldWrite = false;
                }
                if (_mouseDownShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.MouseDown, _mouseDown);
                    _mouseDownShouldWrite = false;
                }
                if (_screenShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.Screen, WriteStream.Vector2ToBytes(_screen));
                    _screenShouldWrite = false;
                }
                if (_debugShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.Debug, _debug);
                    _debugShouldWrite = false;
                }
                if (_voiceShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.Voice, _voice);
                    _voiceShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.MousePosition: {
                    _mousePosition = ReadStream.Vector2FromBytes(stream.ReadBytes());
                    _mousePositionShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.MouseDown: {
                    _mouseDown = stream.ReadFloat();
                    _mouseDownShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.Screen: {
                    _screen = ReadStream.Vector2FromBytes(stream.ReadBytes());
                    _screenShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.Debug: {
                    _debug = stream.ReadFloat();
                    _debugShouldWrite = false;
                    break;
                }
                case (uint)PropertyID.Voice: {
                    _voice = stream.ReadFloat();
                    _voiceShouldWrite = false;
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
